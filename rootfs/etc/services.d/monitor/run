#!/usr/bin/with-contenv sh

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error.

# Make sure we appear with a proper name under `ps`.
if [ ! -L "$0" ]; then
    ln -sf run "$(dirname "$0")/monitor"
    exec "$(dirname "$0")/monitor" "$@"
fi

STATE_DIR="$(mktemp -d)"

trap "exit" TERM QUIT INT
trap "rm -rf "$STATE_DIR" && kill 0" EXIT

MONITORED_TAIL_FILES="\
    /config/log/service.log.0 \
"

MONITORED_WHOLE_FILES="\
    /config/log/app.log \
"

log() {
    echo "[monitor] $*"
}

# Notify to stdout (docker container's log).
notify_stdout() {
    PROBLEM_ID="$1"
    TITLE="$2"
    MSG="$3"
    LEVEL="$4"

    # Debouncing: do not report the same problem too often.
    [ ! -f "$STATE_DIR/$PROBLEM_ID.stdout" ] || return

    echo "$LEVEL: $TITLE $MSG"

    touch "$STATE_DIR/$PROBLEM_ID.stdout"

    # Ignore the same problem for 6 hours.
    sleep 21600 && rm "$STATE_DIR/$PROBLEM_ID.stdout" &
}

# Notify to unRAID.
notify_unraid() {
    PROBLEM_ID="$1"
    TITLE="$2"
    MSG="$3"
    LEVEL="$4"

    # Return now if not running on unRAID.
    [ "${HOST_OS:-UNSET}" = "unRAID" ] || return

    # Return now if required files are missing (volume not mapped).
    [ -f /var/local/emhttp/var.ini ] || return
    [ -f /var/local/emhttp/network.ini ] || return

    # Notify once.
    [ ! -f "$STATE_DIR/$PROBLEM_ID.unraid" ] || return

    # Fetch required information.
    CSRF_TOKEN="$(cat /var/local/emhttp/var.ini | grep "csrf_token=" | tr -d '"')"
    IP_ADDR="$(cat /var/local/emhttp/network.ini | grep "IPADDR:0=" | cut -d'=' -f2 | tr -d '"')"
    PORT="$(cat /var/local/emhttp/var.ini | grep "emhttpPort=" | cut -d"=" -f2 | tr -d '"')"

    # Valided fetched information.
    if [ "${CSRF_TOKEN:-UNSET}" = "UNSET" ]; then
        log "notify_unraid: Failed to fetch the csrf token."
    elif [ "${IP_ADDR:-UNSET}" = "UNSET" ]; then
        log "notify_unraid: Failed to fetch the IP address."
    fi

    # Convert to unRAID level.
    case "$LEVEL" in
        NORMAL)  LEVEL=normal;;
        WARNING) LEVEL=warning;;
        ERROR)   LEVEL=alert;;
        *)
            log "ERROR: notify_unraid: Unknown level '$LEVEL'"
            return
            ;;
    esac

    # Notify.
    set +e
    curl --fail --silent \
         -d "cmd=add" \
         -d "e=$APP_NAME Docker Application" \
         -d "s=$TITLE" \
         -d "i=$LEVEL" \
         -d "d=$MSG" \
         -d "$CSRF_TOKEN" "http://$IP_ADDR:${PORT:-80}/webGui/include/Notify.php"
    CURL_RC="$?"
    set -e
    [ "$CURL_RC" -eq 0 ] || log "notify_unraid: Failed to send notification."
    touch "$STATE_DIR/$PROBLEM_ID.unraid"
}

notify() {
    PROBLEM_ID="$1"
    TITLE="$2"
    MSG="$3"
    LEVEL="$4"

    NOTIFICATION_UID="$(echo "$TITLE:$MSG:$LEVEL" | md5sum | cut -d'-' -f1)"

    if [ "$NOTIFICATION_UID" != "${LAST_NOTIFICATION_UID:-UNSET}" ]; then
        notify_stdout "$@"
        notify_unraid "$@"
    fi

    LAST_NOTIFICATION_UID="$NOTIFICATION_UID"
}

report_problem() {
    PROBLEM_ID="$1"
    ARG1="${2:-UNSET}"

    case "$PROBLEM_ID" in
        1) notify "$PROBLEM_ID" \
                  "CrashPlan is running out of memory." \
                  "More memory needs to be allocated.  This can be done via the CRASHPLAN_SRV_MAX_MEM environment variable." \
                  "ERROR" ;;
        2) notify "$PROBLEM_ID" \
                  "CrashPlan is exceeding inotify's max watch limit." \
                  "Real-time file watching cannot work properly.  The inotify watch limit needs to be increased on the host." \
                  "ERROR" ;;
        3) notify "$PROBLEM_ID" \
                  "CrashPlan's memory consumption comes critically close to its limit." \
                  "$ARG1% of allocated memory is used.  Increase memory allocation to avoid unexpected crashes.  This can be done via the CRASHPLAN_SRV_MAX_MEM environment variable." \
                  "ERROR" ;;
        4) notify "$PROBLEM_ID" \
                  "CrashPlan's memory consumption comes close to its limit." \
                  "$ARG1% of allocated memory is used.  Consider increasing memory allocation to avoid unexpected crashes.  This can be done via the CRASHPLAN_SRV_MAX_MEM environment variable." \
                  "WARNING" ;;
        5) notify "$PROBLEM_ID" \
                  "CrashPlan's memory consumption comes close to its limit." \
                  "$ARG1% of allocated memory is used.  Consider increasing memory allocation to avoid unexpected crashes.  This can be done via the CRASHPLAN_SRV_MAX_MEM environment variable." \
                  "WARNING" ;;
        *)
            log "ERROR: Unknown problem ID '$PROBLEM_ID'"
            return
            ;;
    esac
}

process_line() {
    LINE="$1"

    if echo "$LINE" | grep -q "OutOfMemoryError occurred...RESTARTING!"; then
        report_problem 1
    elif echo "$LINE" | grep -q " Unable to add watch for path "; then
        report_problem 2
    elif echo "$LINE" | grep -q "^memory "; then
        MAX_MEM="$(echo "$LINE" | cut -d'=' -f3 | cut -d'M' -f1)"
        USED_MEM="$(echo "$LINE" | cut -d'=' -f6 | cut -d'M' -f1)"
        PERCENT_USED_MEM="$(echo "$USED_MEM" "* 100 /" "$MAX_MEM" | bc)"
        if [ "$PERCENT_USED_MEM" -ge 95 ]; then
            report_problem 3 "$PERCENT_USED_MEM"
        elif [ "$PERCENT_USED_MEM" -ge 85 ]; then
            report_problem 4 "$PERCENT_USED_MEM"
        elif [ "$PERCENT_USED_MEM" -ge 75 ]; then
            report_problem 5 "$PERCENT_USED_MEM"
        fi
    fi
}

echo "[services.d] monitor: starting..."

CHILD_PIDS=UNSET

tail -n 0 -qF $MONITORED_TAIL_FILES 2>/dev/null | while read LINE
do
    [ "${LINE:-UNSET}" != "UNSET" ] || continue
    process_line "$LINE"
done &
CHILD_PIDS="$CHILD_PIDS $!"

while true
do
    for FILE in $MONITORED_WHOLE_FILES
    do
        [ -f "$FILE" ] || continue
        while read LINE; do
            [ "${LINE:-UNSET}" != "UNSET" ] || continue
            process_line "$LINE"
        done < "$FILE"
    done
    sleep 5
done &
CHILD_PIDS="$CHILD_PIDS $!"

# Exit as soon as one of our child dies.
while true
do
    for PID in $CHILD_PIDS
    do
        [ "$PID" != "UNSET" ] || continue
        if ! ps | grep -w "$PID" | grep -qw monitor; then
            exit 1
        fi
    done
    sleep 1
done

# vim: set ft=sh :
